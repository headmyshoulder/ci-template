depth:
  git: 200

language: cpp

sudo: false

# need to set to tell travis not to use docker, otherwise sudo would not work
# sudo: required

# compiler:
#   - gcc
#   - clang

# os: 
#   - linux
#   - osx

env:
  global:
    # - GCC_VERSION="4.9"
    # - RUN_VALGRIND=1
    
    # COVERITY_SCAN_TOKEN
    - secure: "SoIopnIFQ04YA4Mhh1+jmPnh+Sh56koofPdvyMuGeR0Re/qHLUsnfpe4TS4LpX3lqqLandWUGzq/PHO5eeNG9zL5OeqtUeXaXOuPHPm3OBkXjTXDsdULe0BnefqMJpQSm+VzD6XvZuW4EdaXb8vy79i9AkjwyjB6MFPYKFz4DbJS4pNEyutASZNJd+fEDAk0EAN4S+cnlo6FDWruypxpTpdeISDmikepLlAzCJfyYE2wxgmXTrUQohbUUbgSikqtZGI3Z0pzfP5+/WkeJYqSCJzZMVHRvzDZYUPnGMB8uJH+hC/ThF1bJpjdxS47UF0gmbx49sRX+VCjimwJ8fxVL8zCXPx4FwtTIK1qmSYROyXRdQfJJd94cSEiyRZwRWeIdWTH6JwmIL8qXBA2YEMl4C4HHJTThq71HsO4yWNYJ9RRrM6IB9QsT9JAjHlx90KyafhHAkJbUCS+X7tAi3kZreUFGb4LgqVWXmoMOQb3+1093DhsTntrbDiqMGD1J3D6QptHxEIiDY40LWrjSym470ENDIGg0si2vCQ1Ey+kQvcRnSBtgfbt3gi/SFTM8WNJAd6rbq5GKmZ7XTRMCFX8QuvJCer3QBaOckJpHQG+66hj6DSw5yVxoR4lLmiNFfmnKRfLWADtGm8lwmb++B5U24KcO7FrfHL9y2ycIpsxP0o="
    # - secure: "KFTdHiHehYwK2SciIhdv3eDwi6nNWpwyjv8RqfiWs1ItFjr1292kLwKUVcjEz15tVQMmkWz8IbXe1YFMUbd8lswyRFO6Cpeaw9MP8yfnGkOxtdSddEtQyaujY8eiYQPkPjCGXg3uxzmhGdHx7OI4REcrjoWmKZvMXi/01CnXLnU="

  # matrix:
    # - BUILD_TYPE=Debug
    # - BUILD_TYPE=Release

# matrix:
  # exclude:
    # For now disable gcc on osx as g++4.8 is not yet available
    # - os: osx   
    #   compiler: gcc

matrix:
  include:


    # Gcc
    - env: GCC_VERSION=4.9 BUILD_TYPE=Debug ASAN=off LIBCXX=off COVERALLS_BUILD=1 COVERITY_BUILD=1 RUN_VALGRIND=1
      os: linux
      compiler: gcc-4.9
      addons: &gcc49
        apt:
          packages:
            - g++-4.9
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
      apt:
        packages:
          - python-yaml

    - env: GCC_VERSION=4.9 BUILD_TYPE=Release ASAN=off LIBCXX=off
      os: linux
      compiler: gcc-4.9
      addons: *gcc49


    # Clang
    - env: CLANG_VERSION=3.5 BUILD_TYPE=Debug ASAN=off LIBCXX=on
      os: linux
      compiler: clang-3.5
      addons: &clang35
        apt:
          packages:
            - util-linux
            - clang-3.5
            - valgrind
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.5

    - env: CLANG_VERSION=3.5 BUILD_TYPE=Release ASAN=off LIBCXX=on
      os: linux
      compiler: clang-3.5
      addons: *clang35

  
    # # OSX
    # - env: BUILD_TYPE=Debug ASAN=off LIBCXX=off
    #   os: osx
    #   compiler: clang

    # - env: BUILD_TYPE=Release ASAN=off LIBCXX=off
    #   os: osx
    #   compiler: clang

    
before_install:

  - export CIT_ROOT=`pwd`
  - export THIRD_PARTY_ROOT=${CIT_ROOT}/third_party
  
  - mkdir $THIRD_PARTY_ROOT  

  - |
      if [ "${TRAVIS_OS_NAME}" == "linux" ]; then
        cd $THIRD_PARTY_ROOT
        CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
        mkdir cmake
        wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
        export PATH=${THIRD_PARTY_ROOT}/cmake/bin:${PATH}
      else
        brew install cmake
      fi

  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}" GCOV="/usr/bin/gcov-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi

  - echo $CXX
  - echo $CC
  - if [ -n "GCOV" ]; then echo $GCOV; fi
  - $CXX --version
  - $CC --version
  - if [ -n "GCOV" ]; then $GCOV --version; fi
  

  - export BOOST_ROOT=${THIRD_PARTY_ROOT}/boost
  - export PATH=${THIRD_PARTY_ROOT}/lcov/usr/bin:${PATH}

  - cd $CIT_ROOT
  - .ci/setup_compiler.sh

  - |
      if [ "$LIBCXX" == "on" ]; then
        export CXXFLAGS="-stdlib=libc++ -isystem ${THIRD_PARTY_ROOT}/llvm/install/include/c++/v1"
        export LDFLAGS="-stdlib=libc++ -L ${THIRD_PARTY_ROOT}/llvm/install/lib -l c++ -l c++abi"
        export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${THIRD_PARTY_ROOT}/llvm/install/lib"
      fi

  - cd $CIT_ROOT
  - .ci/init_thirdparty.sh




install:
  - cd $CIT_ROOT
  - mkdir build

script:
  - cd $CIT_ROOT
  - .ci/build_and_test.sh
  - cd $CIT_ROOT
  - ./build/examples/example1
  
after_success:
  - cd $CIT_ROOT
  - if [ -n "$COVERITY_BUILD" ]; then .ci/commit_coverity_scan.sh; fi
  - cd $CIT_ROOT
  - if [ -n "$COVERALLS_BUILD" ]; then .ci/commit_coveralls.sh; fi 
